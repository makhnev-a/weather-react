{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8KAEMA,EACG,mCADHA,EAEI,2CA2HKC,MAlEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAA6B,MAFhD,mBAEJG,EAFI,KAEKC,EAFL,KA8BX,OACI,yBAAKC,UAAqC,qBAAzB,OAAOF,QAAP,IAAOA,OAAP,EAAOA,EAASG,OAA0BH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,OACvG,8BACI,yBAAKF,UAAU,cACX,2BACIG,KAAK,OACLH,UAAW,aACXI,YAAa,YACbC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WApCL,SAACC,GACM,UAAdA,EAAMC,IACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACrDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,MAGpBC,QAAQC,IAAR,UAAezB,EAAf,qBAAoCG,EAApC,kBAAmDH,QA6BrB,qBAAzB,OAAOK,QAAP,IAAOA,OAAP,EAAOA,EAASG,OACjB,iCACI,yBAAKD,UAAU,gBACVF,GACG,yBAAKE,UAAU,YAAYF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,SAG3D,yBAAKrB,UAAU,QAhCf,SAACsB,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAuBKE,CAAY,IAAIC,QAG3C,yBAAKhC,UAAU,eACX,yBAAKA,UAAU,QACViC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD7B,SAGA,yBAAKF,UAAU,WAAWF,EAAQA,QAAQ,GAAGG,WC1GjDkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.362411db.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst api = {\n    key: '330216f9e3042b8a57a7865c3de67865',\n    base: 'https://api.openweathermap.org/data/2.5/'\n};\n\ntype WeatherType = {\n    base: string\n    clouds: WeatherCloudsType\n    cod: number\n    coord: WeatherCoordType\n    dt: number\n    id: number\n    main: WeatherMainType\n    name: string\n    sys: WeatherSysType\n    timezone: number\n    visibility: number\n    weather: Array<WeatherOneType>\n    wind: WeatherWindType\n};\n\ntype WeatherCloudsType = {\n    all: number\n};\n\ntype WeatherCoordType = {\n    lon: number\n    lat: number\n};\n\ntype WeatherMainType = {\n    feels_like: number\n    humidity: number\n    pressure: number\n    temp: number\n    temp_max: number\n    temp_min: number\n};\n\ntype WeatherWindType = {\n    speed: number\n    deg: number\n};\n\ntype WeatherSysType = {\n    type: number\n    id: number\n    country: string\n    sunrise: number\n    sunset: number\n};\n\ntype WeatherOneType = {\n    description: string\n    icon: string\n    id: number\n    main: string\n};\n\nfunction App() {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState<WeatherType | null>(null);\n\n    const search = (event: any) => {\n        if (event.key === 'Enter') {\n            fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n                .then(res => res.json())\n                .then(result => {\n                    setWeather(result);\n                    setQuery('');\n                    console.log(result);\n                });\n        } else {\n            console.log(`${api.base}weather?q=${query}&appid=${api.key}`);\n        }\n    };\n\n    const dateBuilder = (d: any) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n\n        return `${day} ${date} ${month} ${year}`;\n    };\n\n    return (\n        <div className={(typeof weather?.main !== 'undefined') ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n            <main>\n                <div className=\"search-box\">\n                    <input\n                        type=\"text\"\n                        className={'search-bar'}\n                        placeholder={'Search...'}\n                        onChange={e => setQuery(e.target.value)}\n                        value={query}\n                        onKeyPress={search}\n                    />\n                </div>\n                {typeof weather?.main !== 'undefined' && (\n                <section>\n                    <div className=\"location-box\">\n                        {weather && (\n                            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                        )}\n                        {/*<div className=\"location\">{weather.name}, {weather.sys.country}</div>*/}\n                        <div className=\"date\">{dateBuilder(new Date())}</div>\n                    </div>\n\n                    <div className=\"weather-box\">\n                        <div className=\"temp\">\n                            {Math.round(weather.main.temp)}Â°C\n                        </div>\n                        <div className=\"weather\">{weather.weather[0].main}</div>\n                    </div>\n                </section>\n                )}\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}